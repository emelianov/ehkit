#pragma once


extern uint8_t response[4096];
extern size_t responseLen;

extern "C" {
  #include <srp.h>
}
extern "C" SRP_Result srp_create_salted_verification_key(SRP_HashAlgorithm alg,
                                                         SRP_NGType ng_type, const char *username_for_verifier,
                                                         const unsigned char *password, size_t len_password,
                                                         unsigned char **bytes_s,  size_t *len_s,
                                                         unsigned char **bytes_v, size_t *len_v,
                                                         const char *n_hex, const char *g_hex);
extern "C" struct SRPUser *srp_user_new(SRP_HashAlgorithm alg, SRP_NGType ng_type,
                                        const char *username, const char *username_for_verifier,
                                        const unsigned char *bytes_password, size_t len_password, const char *n_hex,
                                        const char *g_hex);
extern "C" SRP_Result srp_user_start_authentication(struct SRPUser* usr, char **username,
                                                    const unsigned char *bytes_a, size_t len_a,
                                                    unsigned char **bytes_A, size_t* len_A);

static const char srp_5054_salt[] = { // Salt
      0xBE, 0xB2, 0x53, 0x79, 0xD1, 0xA8, 0x58, 0x1E, 0xB5, 0xA7, 0x27, 0x67, 0x3A, 0x24,
      0x41, 0xEE,
};

static const char srp_5054_a[] = {  // Private key
        0x60, 0x97, 0x55, 0x27, 0x03, 0x5C, 0xF2, 0xAD, 0x19, 0x89, 0x80, 0x6F, 0x04, 0x07,
        0x21, 0x0B, 0xC8, 0x1E, 0xDC, 0x04, 0xE2, 0x76, 0x2A, 0x56, 0xAF, 0xD5, 0x29, 0xDD,
        0xDA, 0x2D, 0x43, 0x93
};

static const char srp_5054_A[] = {  // Public key
        0xFA, 0xB6, 0xF5, 0xD2, 0x61, 0x5D, 0x1E, 0x32, 0x35, 0x12, 0xE7, 0x99, 0x1C, 0xC3, 0x74, 0x43, 0xF4, 0x87, 0xDA, 0x60, 0x4C, 0xA8, 0xC9, 0x23, 0x0F, 0xCB, 0x04, 0xE5,
        0x41, 0xDC, 0xE6, 0x28, 0x0B, 0x27, 0xCA, 0x46, 0x80, 0xB0, 0x37, 0x4F, 0x17, 0x9D, 0xC3, 0xBD, 0xC7, 0x55, 0x3F, 0xE6, 0x24, 0x59, 0x79, 0x8C, 0x70, 0x1A, 0xD8, 0x64,
        0xA9, 0x13, 0x90, 0xA2, 0x8C, 0x93, 0xB6, 0x44, 0xAD, 0xBF, 0x9C, 0x00, 0x74, 0x5B, 0x94, 0x2B, 0x79, 0xF9, 0x01, 0x2A, 0x21, 0xB9, 0xB7, 0x87, 0x82, 0x31, 0x9D, 0x83,
        0xA1, 0xF8, 0x36, 0x28, 0x66, 0xFB, 0xD6, 0xF4, 0x6B, 0xFC, 0x0D, 0xDB, 0x2E, 0x1A, 0xB6, 0xE4, 0xB4, 0x5A, 0x99, 0x06, 0xB8, 0x2E, 0x37, 0xF0, 0x5D, 0x6F, 0x97, 0xF6,
        0xA3, 0xEB, 0x6E, 0x18, 0x20, 0x79, 0x75, 0x9C, 0x4F, 0x68, 0x47, 0x83, 0x7B, 0x62, 0x32, 0x1A, 0xC1, 0xB4, 0xFA, 0x68, 0x64, 0x1F, 0xCB, 0x4B, 0xB9, 0x8D, 0xD6, 0x97,
        0xA0, 0xC7, 0x36, 0x41, 0x38, 0x5F, 0x4B, 0xAB, 0x25, 0xB7, 0x93, 0x58, 0x4C, 0xC3, 0x9F, 0xC8, 0xD4, 0x8D, 0x4B, 0xD8, 0x67, 0xA9, 0xA3, 0xC1, 0x0F, 0x8E, 0xA1, 0x21,
        0x70, 0x26, 0x8E, 0x34, 0xFE, 0x3B, 0xBE, 0x6F, 0xF8, 0x99, 0x98, 0xD6, 0x0D, 0xA2, 0xF3, 0xE4, 0x28, 0x3C, 0xBE, 0xC1, 0x39, 0x3D, 0x52, 0xAF, 0x72, 0x4A, 0x57, 0x23,
        0x0C, 0x60, 0x4E, 0x9F, 0xBC, 0xE5, 0x83, 0xD7, 0x61, 0x3E, 0x6B, 0xFF, 0xD6, 0x75, 0x96, 0xAD, 0x12, 0x1A, 0x87, 0x07, 0xEE, 0xC4, 0x69, 0x44, 0x95, 0x70, 0x33, 0x68,
        0x6A, 0x15, 0x5F, 0x64, 0x4D, 0x5C, 0x58, 0x63, 0xB4, 0x8F, 0x61, 0xBD, 0xBF, 0x19, 0xA5, 0x3E, 0xAB, 0x6D, 0xAD, 0x0A, 0x18, 0x6B, 0x8C, 0x15, 0x2E, 0x5F, 0x5D, 0x8C,
        0xAD, 0x4B, 0x0E, 0xF8, 0xAA, 0x4E, 0xA5, 0x00, 0x88, 0x34, 0xC3, 0xCD, 0x34, 0x2E, 0x5E, 0x0F, 0x16, 0x7A, 0xD0, 0x45, 0x92, 0xCD, 0x8B, 0xD2, 0x79, 0x63, 0x93, 0x98,
        0xEF, 0x9E, 0x11, 0x4D, 0xFA, 0xAA, 0xB9, 0x19, 0xE1, 0x4E, 0x85, 0x09, 0x89, 0x22, 0x4D, 0xDD, 0x98, 0x57, 0x6D, 0x79, 0x38, 0x5D, 0x22, 0x10, 0x90, 0x2E, 0x9F, 0x9B,
        0x1F, 0x2D, 0x86, 0xCF, 0xA4, 0x7E, 0xE2, 0x44, 0x63, 0x54, 0x65, 0xF7, 0x10, 0x58, 0x42, 0x1A, 0x01, 0x84, 0xBE, 0x51, 0xDD, 0x10, 0xCC, 0x9D, 0x07, 0x9E, 0x6F, 0x16,
        0x04, 0xE7, 0xAA, 0x9B, 0x7C, 0xF7, 0x88, 0x3C, 0x7D, 0x4C, 0xE1, 0x2B, 0x06, 0xEB, 0xE1, 0x60, 0x81, 0xE2, 0x3F, 0x27, 0xA2, 0x31, 0xD1, 0x84, 0x32, 0xD7, 0xD1, 0xBB,
        0x55, 0xC2, 0x8A, 0xE2, 0x1F, 0xFC, 0xF0, 0x05, 0xF5, 0x75, 0x28, 0xD1, 0x5A, 0x88, 0x88, 0x1B, 0xB3, 0xBB, 0xB7, 0xFE
};

// M1
size_t len_s = 16;
unsigned char *bytes_s = 0;
const char *username = "Pair-Setup";
const char *password = "123-00-321";
size_t len_A = 0;
unsigned char *bytes_A = 0;
struct SRPUser *usr;
size_t len_v = 0;
unsigned char *bytes_v = 0;
// M3
size_t len_B = 0;
unsigned char *bytes_B = 0;
size_t len_M = 0;
unsigned char *bytes_M = 0;

uint32_t srpInit() {
  SRP_HashAlgorithm alg = SRP_SHA512;
  SRP_NGType ng_type = SRP_NG_3072;
  bytes_s = (unsigned char*)malloc(sizeof(srp_5054_salt));
  memcpy(bytes_s, srp_5054_salt, sizeof(srp_5054_salt));
  srp_create_salted_verification_key(alg, ng_type, username, (const unsigned char *)password, strlen(password), &bytes_s, &len_s, &bytes_v, &len_v, NULL, NULL);
  yield();
  usr = srp_user_new(alg, ng_type, username, username, (const unsigned char *)password, strlen(password), NULL, NULL);
  yield();
  srp_user_start_authentication(usr, NULL, (unsigned char *)srp_5054_a, sizeof(srp_5054_a), &bytes_A, &len_A);
  yield();

  if (memcmp(&srp_5054_A, bytes_A, len_A) != 0) {
    Serial.printf(" computed A doesn't match!\n");
    return 0;
  }  
  Serial.println("A is matched");
  
}

